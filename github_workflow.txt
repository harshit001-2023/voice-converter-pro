name: Voice Converter Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y espeak espeak-data libespeak1 libespeak-dev
        sudo apt-get install -y festival festvox-kallpc16k
        sudo apt-get install -y portaudio19-dev python3-pyaudio
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test import and basic functionality
      run: |
        python -c "import pyttsx3; print('pyttsx3 imported successfully')"
        python -c "import speech_recognition; print('speech_recognition imported successfully')"
        python -c "from gtts import gTTS; print('gTTS imported successfully')"
        python -c "import pygame; print('pygame imported successfully')"
    
    - name: Run demo script (non-interactive)
      run: |
        python -c "
        import sys
        sys.path.append('.')
        try:
            from demo import demo_features, demo_text_to_speech
            demo_features()
            print('✅ Demo functions work correctly')
        except Exception as e:
            print(f'❌ Demo error: {e}')
            sys.exit(1)
        "
    
    - name: Test configuration management
      run: |
        python -c "
        import json
        import tempfile
        import os
        
        # Test config creation and loading
        config = {'voice_rate': 200, 'voice_volume': 0.9, 'voice_id': 0, 'theme': 'dark'}
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json.dump(config, f)
            config_file = f.name
        
        with open(config_file, 'r') as f:
            loaded_config = json.load(f)
        
        assert loaded_config == config, 'Config loading failed'
        os.unlink(config_file)
        print('✅ Configuration management works correctly')
        "

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8
    
    - name: Check code formatting with Black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Lint with flake8
      run: |
        flake8 . --max-line-length=127 --extend-ignore=E203,W503
